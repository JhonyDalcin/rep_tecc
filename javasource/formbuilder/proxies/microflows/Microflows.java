// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package formbuilder.proxies.microflows;

import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public final class Microflows
{
	/**
	 * Private constructor to prevent instantiation of this class. 
	 */
	private Microflows() {}

	// These are the microflows for the FormBuilder module
	/**
	 * Microflow Called when 'Admin stops responses' is enabled or disabled and set the expiry date to next day if it is disabled and response count is also enabled. if it is enabled admin will take responses until he stops responses by himself.
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_ChangeOptionBuilder(
		formbuilder.proxies.FormNames _formNames
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("FormBuilder.ACT_ChangeOption");
		builder = builder.withParam("FormNames", _formNames);
		return builder;
	}

	/**
	 * Microflow Called when 'Admin stops responses' is enabled or disabled and set the expiry date to next day if it is disabled and response count is also enabled. if it is enabled admin will take responses until he stops responses by himself.
	 */
	public static void aCT_ChangeOption(
		IContext context,
		formbuilder.proxies.FormNames _formNames
	)
	{
		aCT_ChangeOptionBuilder(
				_formNames
			)
			.execute(context);
	}
	/**
	 * Microflow Used to Generate the DeepLink
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_DeepLink_GenerateBuilder(
		formbuilder.proxies.FormNames _formNames
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("FormBuilder.ACT_DeepLink_Generate");
		builder = builder.withParam("FormNames", _formNames);
		return builder;
	}

	/**
	 * Microflow Used to Generate the DeepLink
	 */
	public static java.lang.String aCT_DeepLink_Generate(
		IContext context,
		formbuilder.proxies.FormNames _formNames
	)
	{
		Object result = aCT_DeepLink_GenerateBuilder(
				_formNames
			)
			.execute(context);
		return (java.lang.String) result;
	}
	/**
	 * Deletes All The User Submitted Responses of the Form.
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_DeleteAllResponsesBuilder(
		formbuilder.proxies.FormNames _formNames
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("FormBuilder.ACT_DeleteAllResponses");
		builder = builder.withParam("FormNames", _formNames);
		return builder;
	}

	/**
	 * Deletes All The User Submitted Responses of the Form.
	 */
	public static void aCT_DeleteAllResponses(
		IContext context,
		formbuilder.proxies.FormNames _formNames
	)
	{
		aCT_DeleteAllResponsesBuilder(
				_formNames
			)
			.execute(context);
	}
	/**
	 * Used to Create Options for radio,checkbox and Dropdown
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_OpenOptionsNewBuilder(
		formbuilder.proxies.FormField _formField
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("FormBuilder.ACT_OpenOptionsNew");
		builder = builder.withParam("FormField", _formField);
		return builder;
	}

	/**
	 * Used to Create Options for radio,checkbox and Dropdown
	 */
	public static void aCT_OpenOptionsNew(
		IContext context,
		formbuilder.proxies.FormField _formField
	)
	{
		aCT_OpenOptionsNewBuilder(
				_formField
			)
			.execute(context);
	}
	/**
	 * Microflow Called on Clicking of Save and Close Button
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_SaveCloseFormBuilder(
		formbuilder.proxies.FormNames _formNames
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("FormBuilder.ACT_SaveCloseForm");
		builder = builder.withParam("FormNames", _formNames);
		return builder;
	}

	/**
	 * Microflow Called on Clicking of Save and Close Button
	 */
	public static void aCT_SaveCloseForm(
		IContext context,
		formbuilder.proxies.FormNames _formNames
	)
	{
		aCT_SaveCloseFormBuilder(
				_formNames
			)
			.execute(context);
	}
	/**
	 * Microflow Called on clicking on Save and Next Button
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_SaveNextFormBuilder(
		formbuilder.proxies.FormNames _formNames
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("FormBuilder.ACT_SaveNextForm");
		builder = builder.withParam("FormNames", _formNames);
		return builder;
	}

	/**
	 * Microflow Called on clicking on Save and Next Button
	 */
	public static void aCT_SaveNextForm(
		IContext context,
		formbuilder.proxies.FormNames _formNames
	)
	{
		aCT_SaveNextFormBuilder(
				_formNames
			)
			.execute(context);
	}
	/**
	 * Shows Form so that User can Enter the Data Based on Formid
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Show_FormResponseBuilder(
		java.lang.Long _formIdInput
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("FormBuilder.ACT_Show_FormResponse");
		builder = builder.withParam("FormIdInput", _formIdInput);
		return builder;
	}

	/**
	 * Shows Form so that User can Enter the Data Based on Formid
	 */
	public static void aCT_Show_FormResponse(
		IContext context,
		java.lang.Long _formIdInput
	)
	{
		aCT_Show_FormResponseBuilder(
				_formIdInput
			)
			.execute(context);
	}
	/**
	 * Admin Can Check the Design of the Form Before Publishing
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_ShowFormDesignBuilder(
		formbuilder.proxies.FormNames _formNames
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("FormBuilder.ACT_ShowFormDesign");
		builder = builder.withParam("FormNames", _formNames);
		return builder;
	}

	/**
	 * Admin Can Check the Design of the Form Before Publishing
	 */
	public static void aCT_ShowFormDesign(
		IContext context,
		formbuilder.proxies.FormNames _formNames
	)
	{
		aCT_ShowFormDesignBuilder(
				_formNames
			)
			.execute(context);
	}
	/**
	 * Used to Stop Taking the Responses for the Form. The Form will close in 2 minutes.
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_StopResponsesBuilder(
		formbuilder.proxies.FormNames _formNames
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("FormBuilder.ACT_StopResponses");
		builder = builder.withParam("FormNames", _formNames);
		return builder;
	}

	/**
	 * Used to Stop Taking the Responses for the Form. The Form will close in 2 minutes.
	 */
	public static void aCT_StopResponses(
		IContext context,
		formbuilder.proxies.FormNames _formNames
	)
	{
		aCT_StopResponsesBuilder(
				_formNames
			)
			.execute(context);
	}
	/**
	 * Microflow called on clicking of submit button by user
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder change_Submitted_MicroflowBuilder(
		formbuilder.proxies.FormResponse _formResponse
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("FormBuilder.Change_Submitted_Microflow");
		builder = builder.withParam("FormResponse", _formResponse);
		return builder;
	}

	/**
	 * Microflow called on clicking of submit button by user
	 */
	public static void change_Submitted_Microflow(
		IContext context,
		formbuilder.proxies.FormResponse _formResponse
	)
	{
		change_Submitted_MicroflowBuilder(
				_formResponse
			)
			.execute(context);
	}
	/**
	 * Counts The Number of Responses Submitted for a Form at that Time
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder count_Change_MicroflowBuilder(
		formbuilder.proxies.FormNames _formNames
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("FormBuilder.Count_Change_Microflow");
		builder = builder.withParam("FormNames", _formNames);
		return builder;
	}

	/**
	 * Counts The Number of Responses Submitted for a Form at that Time
	 */
	public static java.lang.Long count_Change_Microflow(
		IContext context,
		formbuilder.proxies.FormNames _formNames
	)
	{
		Object result = count_Change_MicroflowBuilder(
				_formNames
			)
			.execute(context);
		return (java.lang.Long) result;
	}
	/**
	 * Used To Open The required page based on the attribute of Formid
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dL_OpenFormBuilder(
		java.lang.String _formId
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("FormBuilder.DL_OpenForm");
		builder = builder.withParam("FormId", _formId);
		return builder;
	}

	/**
	 * Used To Open The required page based on the attribute of Formid
	 */
	public static void dL_OpenForm(
		IContext context,
		java.lang.String _formId
	)
	{
		dL_OpenFormBuilder(
				_formId
			)
			.execute(context);
	}
	/**
	 * Redirects user to Home Page If error occurs in Deep Link
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder home_ResponsiveProfileBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("FormBuilder.Home_ResponsiveProfile");
		return builder;
	}

	/**
	 * Redirects user to Home Page If error occurs in Deep Link
	 */
	public static void home_ResponsiveProfile(IContext context)
	{
		home_ResponsiveProfileBuilder().execute(context);
	}
	/**
	 * Used to Create the Form Structure so that it can be displayed to the User
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder sF_CreateFormAndFieldResponseBuilder(
		formbuilder.proxies.FormNames _formNames,
		boolean _doCommit
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("FormBuilder.SF_CreateFormAndFieldResponse");
		builder = builder.withParam("FormNames", _formNames);
		builder = builder.withParam("DoCommit", _doCommit);
		return builder;
	}

	/**
	 * Used to Create the Form Structure so that it can be displayed to the User
	 */
	public static formbuilder.proxies.FormResponse sF_CreateFormAndFieldResponse(
		IContext context,
		formbuilder.proxies.FormNames _formNames,
		boolean _doCommit
	)
	{
		Object result = sF_CreateFormAndFieldResponseBuilder(
				_formNames,
				_doCommit
			)
			.execute(context);
		return result == null ? null : formbuilder.proxies.FormResponse.initialize(context, (IMendixObject) result);
	}
	/**
	 * Used to Create Options For the Form Where User Fills The Form
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder sF_CreateOptionsResponseBuilder(
		formbuilder.proxies.FormField _iteratorFormField,
		formbuilder.proxies.FormField_Response _newFormFieldResponse
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("FormBuilder.SF_CreateOptionsResponse");
		builder = builder.withParam("IteratorFormField", _iteratorFormField);
		builder = builder.withParam("NewFormFieldResponse", _newFormFieldResponse);
		return builder;
	}

	/**
	 * Used to Create Options For the Form Where User Fills The Form
	 */
	public static java.util.List<formbuilder.proxies.Options> sF_CreateOptionsResponse(
		IContext context,
		formbuilder.proxies.FormField _iteratorFormField,
		formbuilder.proxies.FormField_Response _newFormFieldResponse
	)
	{
		Object result = sF_CreateOptionsResponseBuilder(
				_iteratorFormField,
				_newFormFieldResponse
			)
			.execute(context);
		return result == null ? null : com.mendix.utils.ListUtils.map((java.util.List<IMendixObject>) result, obj -> formbuilder.proxies.Options.initialize(context, obj));
	}
	/**
	 * Microflow to Create Deep Link
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder sF_GetDeepLinkConfigBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("FormBuilder.SF_GetDeepLinkConfig");
		return builder;
	}

	/**
	 * Microflow to Create Deep Link
	 */
	public static deeplink.proxies.DeepLink sF_GetDeepLinkConfig(IContext context)
	{
		Object result = sF_GetDeepLinkConfigBuilder().execute(context);
		return result == null ? null : deeplink.proxies.DeepLink.initialize(context, (IMendixObject) result);
	}
	/**
	 * Used to Save the Form Based on the Attributes Given
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder sF_SaveFormsBuilder(
		formbuilder.proxies.FormNames _formNames
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("FormBuilder.SF_SaveForms");
		builder = builder.withParam("FormNames", _formNames);
		return builder;
	}

	/**
	 * Used to Save the Form Based on the Attributes Given
	 */
	public static boolean sF_SaveForms(
		IContext context,
		formbuilder.proxies.FormNames _formNames
	)
	{
		Object result = sF_SaveFormsBuilder(
				_formNames
			)
			.execute(context);
		return (boolean) result;
	}
	/**
	 * Microflow to Validate the Form Field Attributes Entered by the User
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder vAL_SaveFormResponseBuilder(
		formbuilder.proxies.FormField_Response _iteratorFormField_Response
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("FormBuilder.VAL_SaveFormResponse");
		builder = builder.withParam("IteratorFormField_Response", _iteratorFormField_Response);
		return builder;
	}

	/**
	 * Microflow to Validate the Form Field Attributes Entered by the User
	 */
	public static boolean vAL_SaveFormResponse(
		IContext context,
		formbuilder.proxies.FormField_Response _iteratorFormField_Response
	)
	{
		Object result = vAL_SaveFormResponseBuilder(
				_iteratorFormField_Response
			)
			.execute(context);
		return (boolean) result;
	}
	/**
	 * Used to Validate the Form while Creation of the Form Based on the Attributes Given
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder vAL_ValidateFormBuilder(
		formbuilder.proxies.FormNames _formNames
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("FormBuilder.VAL_ValidateForm");
		builder = builder.withParam("FormNames", _formNames);
		return builder;
	}

	/**
	 * Used to Validate the Form while Creation of the Form Based on the Attributes Given
	 */
	public static boolean vAL_ValidateForm(
		IContext context,
		formbuilder.proxies.FormNames _formNames
	)
	{
		Object result = vAL_ValidateFormBuilder(
				_formNames
			)
			.execute(context);
		return (boolean) result;
	}
}
