// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package deeplink.proxies.microflows;

import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public final class Microflows
{
	/**
	 * Private constructor to prevent instantiation of this class. 
	 */
	private Microflows() {}

	// These are the microflows for the DeepLink module
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_AttributeSelectBuilder(
		deeplink.proxies.Attribute _attribute,
		deeplink.proxies.DeepLink _deepLink
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DeepLink.ACT_AttributeSelect");
		builder = builder.withParam("Attribute", _attribute);
		builder = builder.withParam("DeepLink", _deepLink);
		return builder;
	}

	public static void aCT_AttributeSelect(
		IContext context,
		deeplink.proxies.Attribute _attribute,
		deeplink.proxies.DeepLink _deepLink
	)
	{
		aCT_AttributeSelectBuilder(
				_attribute,
				_deepLink
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_DeleteDeepLinkBuilder(
		deeplink.proxies.DeepLink _deepLinkURL
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DeepLink.ACT_DeleteDeepLink");
		builder = builder.withParam("DeepLinkURL", _deepLinkURL);
		return builder;
	}

	public static void aCT_DeleteDeepLink(
		IContext context,
		deeplink.proxies.DeepLink _deepLinkURL
	)
	{
		aCT_DeleteDeepLinkBuilder(
				_deepLinkURL
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_EntitySelectBuilder(
		deeplink.proxies.Entity _entity,
		deeplink.proxies.DeepLink _deepLink
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DeepLink.ACT_EntitySelect");
		builder = builder.withParam("Entity", _entity);
		builder = builder.withParam("DeepLink", _deepLink);
		return builder;
	}

	public static void aCT_EntitySelect(
		IContext context,
		deeplink.proxies.Entity _entity,
		deeplink.proxies.DeepLink _deepLink
	)
	{
		aCT_EntitySelectBuilder(
				_entity,
				_deepLink
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_MicroflowSelectBuilder(
		deeplink.proxies.Microflow _microflow,
		deeplink.proxies.DeepLink _deepLink
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DeepLink.ACT_MicroflowSelect");
		builder = builder.withParam("Microflow", _microflow);
		builder = builder.withParam("DeepLink", _deepLink);
		return builder;
	}

	public static void aCT_MicroflowSelect(
		IContext context,
		deeplink.proxies.Microflow _microflow,
		deeplink.proxies.DeepLink _deepLink
	)
	{
		aCT_MicroflowSelectBuilder(
				_microflow,
				_deepLink
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_ShowMicroflowSelectBuilder(
		deeplink.proxies.DeepLink _deepLink
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DeepLink.ACT_ShowMicroflowSelect");
		builder = builder.withParam("DeepLink", _deepLink);
		return builder;
	}

	public static void aCT_ShowMicroflowSelect(
		IContext context,
		deeplink.proxies.DeepLink _deepLink
	)
	{
		aCT_ShowMicroflowSelectBuilder(
				_deepLink
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder bCo_Deeplink_SetAttributesBuilder(
		deeplink.proxies.DeepLink _deepLink
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DeepLink.BCo_Deeplink_SetAttributes");
		builder = builder.withParam("DeepLink", _deepLink);
		return builder;
	}

	public static boolean bCo_Deeplink_SetAttributes(
		IContext context,
		deeplink.proxies.DeepLink _deepLink
	)
	{
		Object result = bCo_Deeplink_SetAttributesBuilder(
				_deepLink
			)
			.execute(context);
		return (boolean) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder clearOldPendingLinksBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DeepLink.ClearOldPendingLinks");
		return builder;
	}

	public static void clearOldPendingLinks(IContext context)
	{
		clearOldPendingLinksBuilder().execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder createDeeplinkConfigBuilder(
		java.lang.String _name,
		java.lang.String _microflow,
		java.lang.String _objectType,
		java.lang.String _objectAttr,
		boolean _allowGuests,
		boolean _useStringArg,
		boolean _useAsHome,
		java.lang.String _indexPage,
		boolean _separateGetParams,
		boolean _objectAsParameter
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DeepLink.CreateDeeplinkConfig");
		builder = builder.withParam("Name", _name);
		builder = builder.withParam("Microflow", _microflow);
		builder = builder.withParam("ObjectType", _objectType);
		builder = builder.withParam("ObjectAttr", _objectAttr);
		builder = builder.withParam("AllowGuests", _allowGuests);
		builder = builder.withParam("UseStringArg", _useStringArg);
		builder = builder.withParam("UseAsHome", _useAsHome);
		builder = builder.withParam("IndexPage", _indexPage);
		builder = builder.withParam("SeparateGetParams", _separateGetParams);
		builder = builder.withParam("ObjectAsParameter", _objectAsParameter);
		return builder;
	}

	public static void createDeeplinkConfig(
		IContext context,
		java.lang.String _name,
		java.lang.String _microflow,
		java.lang.String _objectType,
		java.lang.String _objectAttr,
		boolean _allowGuests,
		boolean _useStringArg,
		boolean _useAsHome,
		java.lang.String _indexPage,
		boolean _separateGetParams,
		boolean _objectAsParameter
	)
	{
		createDeeplinkConfigBuilder(
				_name,
				_microflow,
				_objectType,
				_objectAttr,
				_allowGuests,
				_useStringArg,
				_useAsHome,
				_indexPage,
				_separateGetParams,
				_objectAsParameter
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder deepLinkHomeBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DeepLink.DeepLinkHome");
		return builder;
	}

	public static boolean deepLinkHome(IContext context)
	{
		Object result = deepLinkHomeBuilder().execute(context);
		return (boolean) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dL_MultiStringValueExampleBuilder(
		java.lang.String _parameter_1,
		java.lang.String _parameter_2
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DeepLink.DL_MultiStringValueExample");
		builder = builder.withParam("Parameter_1", _parameter_1);
		builder = builder.withParam("Parameter_2", _parameter_2);
		return builder;
	}

	public static void dL_MultiStringValueExample(
		IContext context,
		java.lang.String _parameter_1,
		java.lang.String _parameter_2
	)
	{
		dL_MultiStringValueExampleBuilder(
				_parameter_1,
				_parameter_2
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dL_ObjectParameterExampleBuilder(
		system.proxies.Language _language
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DeepLink.DL_ObjectParameterExample");
		builder = builder.withParam("Language", _language);
		return builder;
	}

	public static void dL_ObjectParameterExample(
		IContext context,
		system.proxies.Language _language
	)
	{
		dL_ObjectParameterExampleBuilder(
				_language
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dL_SingleStringParameterExampleBuilder(
		java.lang.String _urlPath
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DeepLink.DL_SingleStringParameterExample");
		builder = builder.withParam("UrlPath", _urlPath);
		return builder;
	}

	public static void dL_SingleStringParameterExample(
		IContext context,
		java.lang.String _urlPath
	)
	{
		dL_SingleStringParameterExampleBuilder(
				_urlPath
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dS_AttributeBuilder(
		deeplink.proxies.DeepLink _deepLink
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DeepLink.DS_Attribute");
		builder = builder.withParam("DeepLink", _deepLink);
		return builder;
	}

	public static java.util.List<deeplink.proxies.Attribute> dS_Attribute(
		IContext context,
		deeplink.proxies.DeepLink _deepLink
	)
	{
		Object result = dS_AttributeBuilder(
				_deepLink
			)
			.execute(context);
		return result == null ? null : com.mendix.utils.ListUtils.map((java.util.List<IMendixObject>) result, obj -> deeplink.proxies.Attribute.initialize(context, obj));
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dS_GetParametersFromMicroflowBuilder(
		java.lang.String _microflow,
		java.lang.String _type
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DeepLink.DS_GetParametersFromMicroflow");
		builder = builder.withParam("Microflow", _microflow);
		builder = builder.withParam("Type", _type);
		return builder;
	}

	public static java.util.List<deeplink.proxies.KeyValue> dS_GetParametersFromMicroflow(
		IContext context,
		java.lang.String _microflow,
		java.lang.String _type
	)
	{
		Object result = dS_GetParametersFromMicroflowBuilder(
				_microflow,
				_type
			)
			.execute(context);
		return result == null ? null : com.mendix.utils.ListUtils.map((java.util.List<IMendixObject>) result, obj -> deeplink.proxies.KeyValue.initialize(context, obj));
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dS_MicroflowByDeeplinkBuilder(
		deeplink.proxies.DeepLink _deepLink
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DeepLink.DS_MicroflowByDeeplink");
		builder = builder.withParam("DeepLink", _deepLink);
		return builder;
	}

	public static deeplink.proxies.Microflow dS_MicroflowByDeeplink(
		IContext context,
		deeplink.proxies.DeepLink _deepLink
	)
	{
		Object result = dS_MicroflowByDeeplinkBuilder(
				_deepLink
			)
			.execute(context);
		return result == null ? null : deeplink.proxies.Microflow.initialize(context, (IMendixObject) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder getExampleObjectBuilder(
		deeplink.proxies.DeepLink _deepLink
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DeepLink.GetExampleObject");
		builder = builder.withParam("DeepLink", _deepLink);
		return builder;
	}

	public static java.lang.String getExampleObject(
		IContext context,
		deeplink.proxies.DeepLink _deepLink
	)
	{
		Object result = getExampleObjectBuilder(
				_deepLink
			)
			.execute(context);
		return (java.lang.String) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder getMicroflowInputParametersAsQueryStringBuilder(
		java.lang.String _microflow
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DeepLink.GetMicroflowInputParametersAsQueryString");
		builder = builder.withParam("Microflow", _microflow);
		return builder;
	}

	public static java.lang.String getMicroflowInputParametersAsQueryString(
		IContext context,
		java.lang.String _microflow
	)
	{
		Object result = getMicroflowInputParametersAsQueryStringBuilder(
				_microflow
			)
			.execute(context);
		return (java.lang.String) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder getParametersBuilder(
		deeplink.proxies.DeepLink _deepLink
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DeepLink.GetParameters");
		builder = builder.withParam("DeepLink", _deepLink);
		return builder;
	}

	public static java.util.List<deeplink.proxies.KeyValue> getParameters(
		IContext context,
		deeplink.proxies.DeepLink _deepLink
	)
	{
		Object result = getParametersBuilder(
				_deepLink
			)
			.execute(context);
		return result == null ? null : com.mendix.utils.ListUtils.map((java.util.List<IMendixObject>) result, obj -> deeplink.proxies.KeyValue.initialize(context, obj));
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder setupExampleDeeplinksBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DeepLink.SetupExampleDeeplinks");
		return builder;
	}

	public static void setupExampleDeeplinks(IContext context)
	{
		setupExampleDeeplinksBuilder().execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder startDeeplinkBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DeepLink.StartDeeplink");
		return builder;
	}

	public static boolean startDeeplink(IContext context)
	{
		Object result = startDeeplinkBuilder().execute(context);
		return (boolean) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder sUB_GetApplicationURLBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DeepLink.SUB_GetApplicationURL");
		return builder;
	}

	public static java.lang.String sUB_GetApplicationURL(IContext context)
	{
		Object result = sUB_GetApplicationURLBuilder().execute(context);
		return (java.lang.String) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder sUB_ReloadMetaDataBuilder(
		deeplink.proxies.DeepLink _deepLink
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DeepLink.SUB_ReloadMetaData");
		builder = builder.withParam("DeepLink", _deepLink);
		return builder;
	}

	public static void sUB_ReloadMetaData(
		IContext context,
		deeplink.proxies.DeepLink _deepLink
	)
	{
		sUB_ReloadMetaDataBuilder(
				_deepLink
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder updateMicroflowMetaDataBuilder(
		deeplink.proxies.Microflow _newMicroflow,
		deeplink.proxies.DeepLink _deepLink
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DeepLink.UpdateMicroflowMetaData");
		builder = builder.withParam("NewMicroflow", _newMicroflow);
		builder = builder.withParam("DeepLink", _deepLink);
		return builder;
	}

	public static void updateMicroflowMetaData(
		IContext context,
		deeplink.proxies.Microflow _newMicroflow,
		deeplink.proxies.DeepLink _deepLink
	)
	{
		updateMicroflowMetaDataBuilder(
				_newMicroflow,
				_deepLink
			)
			.execute(context);
	}
}
